export const ValidatorErrors: Record.Factory<{
    errors: Map<string, any>;
    childErrors: Map<string, any>;
    errCount: number;
    errorsToJS: () => any;
    getErrors: () => any;
    getChildErrors: () => any;
    addError: (type: any, context?: any) => any;
    addChildError: (type: any, context?: any) => any;
    addChildErrors: (errors: any) => any;
    addErrors: (errors: any) => any;
    addErrorsToChild: (errors: any) => any;
    hasError: (type?: undefined) => any;
    getError: (type: any) => any;
    getChildError: (type: any) => any;
}>;
export function createValidatorErrors(): Record<{
    errors: Map<string, any>;
    childErrors: Map<string, any>;
    errCount: number;
    errorsToJS: () => any;
    getErrors: () => any;
    getChildErrors: () => any;
    addError: (type: any, context?: any) => any;
    addChildError: (type: any, context?: any) => any;
    addChildErrors: (errors: any) => any;
    addErrors: (errors: any) => any;
    addErrorsToChild: (errors: any) => any;
    hasError: (type?: undefined) => any;
    getError: (type: any) => any;
    getChildError: (type: any) => any;
}> & Readonly<{
    errors: Map<string, any>;
    childErrors: Map<string, any>;
    errCount: number;
    errorsToJS: () => any;
    getErrors: () => any;
    getChildErrors: () => any;
    addError: (type: any, context?: any) => any;
    addChildError: (type: any, context?: any) => any;
    addChildErrors: (errors: any) => any;
    addErrors: (errors: any) => any;
    addErrorsToChild: (errors: any) => any;
    hasError: (type?: undefined) => any;
    getError: (type: any) => any;
    getChildError: (type: any) => any;
}>;
import { Map } from "immutable";
import { Record } from "immutable";
